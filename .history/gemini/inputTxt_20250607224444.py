import os
import sys
from openai import OpenAI

def main():
    print(" Iniciando el script...")
    
    # Configuraci칩n de la API
    client = OpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key="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",
    )

    # Configuraci칩n opcional para OpenRouter
    extra_headers = {
        "HTTP-Referer": "https://tusitio.com",
        "X-Title": "MiScriptDePrueba",
    }

    # Leer el archivo de texto
    script_dir = os.path.dirname(os.path.abspath(__file__))
    ruta_txt = os.path.join(script_dir, "extracted_texts.txt")
    
    print(f" Buscando archivo en: {ruta_txt}")
    
    try:
        with open(ruta_txt, "r", encoding="utf-8") as f:
            texto = f.read()
        print(f" Archivo le칤do correctamente. Tama침o: {len(texto)} caracteres")
    except Exception as e:
        print(f" Error al leer el archivo: {e}")
        print("Aseg칰rate de que el archivo 'extracted_texts.txt' est치 en la misma carpeta que el script.")
        return

    # Crear el prompt
    prompt = f"""A continuaci칩n se presenta un texto:

{texto}

# Rol: Analista de noticias
# Tarea: Analiza el contenido, identifica el tema principal, busca eventos relacionados en los 칰ltimos 90 d칤as, y genera una l칤nea de tiempo con fuente y fecha.


1. Extrae el tema principal de la noticia ingresada.
2. Realiza una b칰squeda contextual de los eventos m치s importantes relacionados con ese tema, ocurridos en los 칰ltimos 90 d칤as.
3. Organiza los eventos encontrados en una l칤nea de tiempo cronol칩gica.
4. Para cada evento incluye:
   - Fecha exacta (si est치 disponible)
   - Descripci칩n corta del evento
   - Fuente del evento (si aplica)

## Periodo analizado: 칔ltimos 60 d칤as

| Fecha       | Evento clave                                                         | Fuente (opcional)   |
|-------------|----------------------------------------------------------------------|---------------------|
| 2025-04-XX  | [Descripci칩n breve del hecho ocurrido en esa fecha]                 | [Fuente o medio]    |
| 2025-05-XX  | [Otro hecho relacionado]                                             | [Fuente o medio]    |
| ...         | ...                                                                  | ...                 |

---

# 游닗 Contraste entre medios (si aplica)

| Medio       | Enfoque/resumen del tratamiento de la noticia |
|-------------|-----------------------------------------------|
| [Medio A]   | [Resumen breve del 치ngulo del medio]          |
| [Medio B]   | [Resumen breve]                                |

---

# 游늷 Conclusi칩n

[Resumen de los hechos principales, evoluci칩n del tema y observaciones sobre el tratamiento period칤stico si es relevante.]
"""

    print("\n Enviando solicitud al modelo...")
    
    try:
        # Llamar al modelo
        completion = client.chat.completions.create(
            model="deepseek/deepseek-r1-0528-qwen3-8b:free",
            messages=[{"role": "user", "content": prompt}],
            extra_headers=extra_headers,
        )
        
        # Mostrar la respuesta
        print("\n Respuesta del modelo:")
        print("-" * 50)
        print(completion.choices[0].message.content)
        print("-" * 50)
        
    except Exception as e:
        print(f"\n Error al llamar a la API: {e}")
        print("Por favor verifica tu conexi칩n a internet y la configuraci칩n de la API.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n Programa interrumpido por el usuario.")
        sys.exit(0)
    except Exception as e:
        print(f"\n Error inesperado: {e}")
        sys.exit(1)
