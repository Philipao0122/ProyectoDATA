import os
import sys
from openai import OpenAI

def main():
    print(" Iniciando el script...")
    
    # Configuraci√≥n de la API
    client = OpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key="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",
    )

    # Configuraci√≥n opcional para OpenRouter
    extra_headers = {
        "HTTP-Referer": "https://tusitio.com",
        "X-Title": "MiScriptDePrueba",
    }

    # Leer el archivo de texto
    script_dir = os.path.dirname(os.path.abspath(__file__))
    ruta_txt = os.path.join(script_dir, "extracted_texts.txt")
    
    print(f" Buscando archivo en: {ruta_txt}")
    
    try:
        with open(ruta_txt, "r", encoding="utf-8") as f:
            texto = f.read()
        print(f" Archivo le√≠do correctamente. Tama√±o: {len(texto)} caracteres")
    except Exception as e:
        print(f" Error al leer el archivo: {e}")
        print("Aseg√∫rate de que el archivo 'extracted_texts.txt' est√° en la misma carpeta que el script.")
        return

    # Crear el prompt
    prompt = f"""A continuaci√≥n se presenta un texto:

{texto}

Persona: Eres un analista de datos experto y altamente preciso, especializado en la creaci√≥n de cronolog√≠as de eventos a partir de textos noticiosos y documentos hist√≥ricos. Tu objetivo es garantizar la m√°xima fiabilidad y exhaustividad en la extracci√≥n de informaci√≥n temporal.
Tarea: Tu tarea principal es identificar y extraer todas las referencias temporales relevantes de los documentos/textos que se te proporcionen. Esto incluye:
‚Ä¢
Fechas espec√≠ficas de eventos (ej., "1 de junio de 2017").
‚Ä¢
Rangos de tiempo definidos (ej., "2017-2021", "Mayo de 2022", "Principios de junio de 2025").
‚Ä¢
Cualquier menci√≥n temporal clave que implique un per√≠odo (ej., "principios de [a√±o]", "finales de [a√±o]", "mediados de [mes] de [a√±o]", "Per√≠odo posterior", "La Era de X (Twitter)").
Contexto: Analiza cuidadosamente el contenido de los documentos proporcionados, prestando especial atenci√≥n al contexto narrativo para diferenciar las fechas de eventos relevantes de otras referencias num√©ricas o ambiguas. Considera la "verdad fundamental" del texto para asegurar la coherencia temporal.
Formato: Presenta toda la informaci√≥n extra√≠da en una tabla estrictamente estructurada con las siguientes columnas:
‚Ä¢
'Evento/Descripci√≥n': Una descripci√≥n concisa del evento, hito o contexto relacionado con la fecha. Si la fecha es aproximada o ambigua, a√±ade una nota aqu√≠ (ej., "Reuni√≥n Trump-Musk (fecha aproximada)").
‚Ä¢
'Fecha Inicio (AAAA-MM-DD)': La fecha de inicio del evento o el punto m√°s temprano del rango temporal.
‚ó¶
Para fechas puntuales (ej. "1 de junio de 2017"), repite la misma fecha en 'Fecha Fin'.
‚ó¶
Para rangos aproximados como "principios de 2017", usa "2017-01-01".
‚ó¶
Para rangos aproximados como "finales de 2024", usa "2024-12-01".
‚ó¶
Para rangos aproximados como "mediados de junio de 2025", usa "2025-06-15".
‚ó¶
Si no se puede determinar una fecha precisa para un evento mencionado, pero s√≠ el a√±o, usa "AAAA-01-01".
‚Ä¢
'Fecha Fin (AAAA-MM-DD)': La fecha de fin del evento o el punto m√°s tard√≠o del rango temporal.
‚ó¶
Para rangos aproximados como "principios de 2017", usa "2017-01-15".
‚ó¶
Para rangos aproximados como "finales de 2024", usa "2024-12-31".
‚ó¶
Para rangos aproximados como "mediados de junio de 2025", usa "2025-06-15".
‚ó¶
Si no se puede determinar una fecha precisa para un evento mencionado, pero s√≠ el a√±o, usa "AAAA-12-31".
Criterios de √âxito:
‚Ä¢
Prioriza la exactitud y la exhaustividad. No dejes fechas importantes sin identificar.
‚Ä¢
Si una referencia temporal es inherentemente vaga o imposible de convertir a un formato AAAA-MM-DD sin suposiciones significativas, haz tu mejor estimaci√≥n razonable y a√±ade una nota clara en 'Evento/Descripci√≥n' para indicar la ambig√ºedad (ej., "Fecha Amb. - requiere clarificaci√≥n adicional", "Rango estimado basado en contexto"). Evita "alucinaciones" de fechas no presentes.
# üìå Conclusi√≥n

[Resumen de los hechos principales, evoluci√≥n del tema y observaciones sobre el tratamiento period√≠stico si es relevante.]
"""

    print("\n Enviando solicitud al modelo...")
    
    try:
        # Llamar al modelo
        completion = client.chat.completions.create(
            model="deepseek/deepseek-r1-0528-qwen3-8b:free",
            messages=[{"role": "user", "content": prompt}],
            extra_headers=extra_headers,
        )
        
        # Mostrar la respuesta
        print("\n Respuesta del modelo:")
        print("-" * 50)
        print(completion.choices[0].message.content)
        print("-" * 50)
        
    except Exception as e:
        print(f"\n Error al llamar a la API: {e}")
        print("Por favor verifica tu conexi√≥n a internet y la configuraci√≥n de la API.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n Programa interrumpido por el usuario.")
        sys.exit(0)
    except Exception as e:
        print(f"\n Error inesperado: {e}")
        sys.exit(1)
